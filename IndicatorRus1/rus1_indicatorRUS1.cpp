
// модуль работы с индикаторной платой РУС-1 (LCD-панель + 4 кнопки) ООО "НПО Наука"

#define rus1_indicatorRUS1

#include "msp430G2553.h"

#include "rus1_screenLCD_AC-162A.hpp"
#include "rus1_indicatorRUS1.hpp"
#include "rus1_peripherals.hpp"

/*
  Нажатие кнопок на индикаторной плате РУС-1 (LCD-панель + 4 кнопки) используется для:
- перехода по дереву TreeNode.
- изменения переменной.
- изменения режима редактирования переменной (ррп).
  Rrp_0 - rrp_5 устанавливаются при изменении переменной.
  Если в любой момент возникла необходимость показать пользователю срочное сообщение [об ошибке], 
включается режим спецсообщения (см. rus1.cpp -> RezhimSpecMessage_On). Режим спецсообщения сбрасывается 
при нажатии любой кнопки. 
  

  Описание работы "КНОПКА" -> "Rrp_0 - rrp_5":
Изменение переменной производится в подпрограмме, прикреплённой к каждому узлу дерева currentTreeNode->pFunctionShowInfo().
Чтобы подпрограмма "знала", какие действия ей надо делать с изменяемой переменной при очередном её вызове, 
используется флаг, см. GetRRP.
Действия, которые надо делать подпрограмме при изменении переменной:
- только вошли в режим редактирования и пока ничего не указано, что делать с переменной (GetRRP == 1).
- "увеличивать" переменную (GetRRP == 2).
- "уменьшать" переменную (GetRRP == 3).
- завершить редактирование переменной, когда редактирование принято (GetRRP == 4).
- завершить редактирование переменной, когда редактирование отменено (GetRRP == 5).
При выводе значения переменной следует учитывать, что в конце строки (перед началом редактированием) присутствует символ "Ввод".
*/

// маска, показывающая, что обрабатывается нажатие кнопки
// когда != 0, обрабатывается кнопка
// биты от BIT0 до BIT7 совпадают с реальными ножками indRus1_InPort, показывают что
//    произошло нажатие кнопки, и происходит ожидание паузы для защиты от дребезга
// биты от BIT8 до BIT15 (= "реальные ножки indRus1_InPort" << 8) - успешно прождали паузу от дребезга,  
//    определили событие нажатия кнопки, и ожидаем паузу после события нажатия кнопки
unsigned int buttonMask_Pressed = 0;

// счётчик прерываний таймера у кнопки
unsigned int interruptsIndRus1_ButtonCnt=0;

// счётчик срабатывания таймера lcd для изменения переменной [через дисплей]
unsigned int f_timerCounterChangePerem = 0;
// счётчик срабатывания таймера lcd для изменения deltaChange, при нажатой кнопке
unsigned int f_timerCounterLnChangeKeyPressed = 0;
// счётчик срабатывания таймера lcd для изменения deltaChange, при ненажатой кнопке
unsigned int f_timerCounterLnChangeKeyUnPressed = 0;



// настраиваем индикатор РУС1 на вывод информации на LCD
void IndRus1_SetRezhimLCD()
{
  portLcdDirData |= indRus1_ButtonAll;    // Регистр направления PxDIR =1 на выход
  portLcdRenData &= (~indRus1_ButtonAll); // запрещаем подтяжку
  portLcdOutData &= (~indRus1_ButtonAll); // выходной сигнал = 0
} 

// настраиваем индикатор РУС1 на ожидание прерываний от кнопок
void IndRus1_SetRezhimButton() 
{
  portLcdDirData &= (~indRus1_ButtonAll); // Регистр направления PxDIR // =0 на вход
  portLcdRenData |= indRus1_ButtonAll;    // разрешаем подтяжку
  portLcdOutData |= indRus1_ButtonAll;    // подтяжка выводов к питанию
  /*indexLastCMD = NULL;*/  // на случай нестабильной обвязки индикатора, из-за которого после IndRus1SetRezhimButton на индикаторе может сбиться предыдущая команда
}